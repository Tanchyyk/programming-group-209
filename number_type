'''
'''
# IMPORTANT: do not forget about thoughtful documentation
#
#
# TODO: checking for prime and ulam numbers



def user_number_type(number: int) -> str:
    ''' Just in case we will need to determine what
    type of number is inputed.
    '''

    # TODO: what if a number can be both prime and lucky, for instance?

    result = 'Number is '


    num_charact = ''
    if lucky_type(number):
        num_charact += 'lucky_number'
    if ulam_number(number):
        num_charact +=  'ulam_number'
    if prime_number(number):
        num_charact +=  'prime_number'
    if num_charact != '':
        result += ' and '.join(num_charact)
        return result
    result += 'bad number'

    return result

def lucky_type(number: int) -> bool:
    '''

    '''

    if number in sieve_flavius(number + 1):
        return True
    return False

def sieve_flavius(number_of_elm: int) ->  list:
    '''
    Builds a list of lucky_numbers.

    Takes a positive integer.
    If the argument is not a positive int, returns None
    If the argument is not a number, returns None.

    TODO: doctests
    '''

    try:
        # creates a list of odd numbers
        lucky_number_list = [num for num in range(number_of_elm) if num % 2 != 0]
    except TypeError:
        return None

    i = 1
    start_lenght = len(lucky_number_list)
    final_lenght = 0
    # if lenght of the list doesn't change, the loop stops
    # (if there are no numbers crossed out)
    while start_lenght != final_lenght:
        start_lenght = len(lucky_number_list)
        number = lucky_number_list[i]
        # deletes each 3/7/... elm of the list
        del lucky_number_list[(number - 1)::number]
        final_lenght = len(lucky_number_list)
        i += 1

    return lucky_number_list

def prime_number(number: int) -> str:
    '''

    '''
    if number in sieve_eratosthene(number + 1):
        return True
    return False

def sieve_eratosthene(number: int) -> list:
    '''
    This function returns the list of prime numbers in range n

    Takes a posititve integer
    If the argument is not a positive int, returns blank list

    >>> sieve_eratosthene(30)
    [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]
    >>> sieve_eratosthene(10)
    [2, 3, 5, 7]
    >>> sieve_eratosthene(-5)
    []
    >>> sieve_eratosthene(1)
    []
    >>> sieve_eratosthene('abc')
    []
    '''

    #Create a list containing all the numbers.
    #Initialize them as True. Later, prime[i] will be False
    #if it is composite and True if it is prime
    if not isinstance(number, int) or number < 1:
        return []

    prime = [True for i in range(number + 1)]
    prime[0], prime[1] = False, False
    curr_num = 2

    #Start loop beginning from 2, as 0 and 1 are not prime
    #The loop goes up to sqrt(number) to decrease the number 
    #of iterations and improve the time of work
    while(curr_num * curr_num < number):
        if prime[curr_num]:
            #if current number is prime, update all the
            #following numbers that are multiplied by curr_num
            #as composite, beginning from curr_numË†2
            for i in range(curr_num * curr_num, number + 1, curr_num):
                prime[i] = False
        curr_num += 1
    prime_list = []
    for item in enumerate(prime):
        if item[1]:
            prime_list.append(item[0])
    return prime_list

def ulam_number(number: int) -> bool:
    '''
    '''
    if number in numbers_Ulam(number + 1):
        return True
    return False


def numbers_Ulam(number: int) -> list:
    """
    This fucntion returns list of n Ulam numbers
    >>> numbers_Ulam(10)
    [1, 2, 3, 4, 6, 8, 11, 13, 16, 18]
    >>> numbers_Ulam(2)
    [1, 2]
    >>> numbers_Ulam(1)
    [1]
    """
    ulam = []
    if number >= 1:
        ulam.append(1)
    if number >= 2:
        ulam.append(2)
    if number > 2:
        ulam_num = 3
        while len(ulam) < number:
            coincidence = 0
            for i in enumerate(ulam):
                for j in range(i[0] + 1, len(ulam)):
                    if (ulam[i[0]] + ulam[j]) == ulam_num:
                        coincidence += 1
                    if coincidence > 1:
                        break
                if coincidence > 1:
                    break
            if coincidence == 1:
                ulam.append(ulam_num)
            ulam_num += 1
    return ulam
